services:
  # Config Service
  config-service:
    build: ./services/config-service
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Auth Service
  auth-service:
    build: ./services/auth-service
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - DB_HOST=auth-db
      - DB_PORT=5432
      - DB_NAME=auth
      - DB_USER=authuser
      - DB_PASSWORD=${AUTH_DB_PASSWORD:-authpass}
      - JWT_SECRET=${JWT_SECRET:-dev-secret-change-in-production}
    depends_on:
      auth-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Auth Database
  auth-db:
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=auth
      - POSTGRES_USER=authuser
      - POSTGRES_PASSWORD=${AUTH_DB_PASSWORD:-authpass}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authuser -d auth"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Admin UI
  admin-ui:
    build: ./services/admin-ui
    ports:
      - "3004:3004"
    environment:
      - PORT=3004
    depends_on:
      - admin-service
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3004', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # URL Service
  url-service:
    build: ./services/url-service
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - DB_HOST=url-db
      - DB_PORT=3306
      - DB_NAME=urlshort
      - DB_USER=urluser
      - DB_PASSWORD=${URL_DB_PASSWORD:-urlpass}
      - AUTH_SERVICE_URL=http://auth-service:3001
      - CONFIG_SERVICE_URL=http://config-service:3000
    depends_on:
      url-db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # URL Database
  url-db:
    image: mysql:8-oracle
    environment:
      - MYSQL_DATABASE=urlshort
      - MYSQL_USER=urluser
      - MYSQL_PASSWORD=${URL_DB_PASSWORD:-urlpass}
      - MYSQL_ROOT_PASSWORD=${URL_DB_ROOT_PASSWORD:-rootpass}
    volumes:
      - url-db-data:/var/lib/mysql
      - ./services/url-service/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "urluser", "-p${URL_DB_PASSWORD:-urlpass}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redirect Service
  redirect-service:
    build: ./services/redirect-service
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - URL_SERVICE_URL=http://url-service:3002
      - CONFIG_SERVICE_URL=http://config-service:3000
    depends_on:
      url-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Analytics Service (placeholder)
  # analytics-service:
  #   build: ./services/analytics-service
  #   depends_on:
  #     - redirect-service

  # Admin Service
  admin-service:
    build: ./services/admin-service
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
      - AUTH_SERVICE_URL=http://auth-service:3001
      - URL_SERVICE_URL=http://url-service:3002
      - CONFIG_SERVICE_URL=http://config-service:3000
    depends_on:
      auth-service:
        condition: service_healthy
      url-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  auth-db-data:
  url-db-data: